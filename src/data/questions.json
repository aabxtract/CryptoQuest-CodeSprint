
[
  {
    "id": "v1",
    "topic": "Variables & Data Types",
    "level": "Easy",
    "question": "Declare an unsigned integer variable named 'myNumber' and initialize it to 10.",
    "template": "____ myNumber = 10;",
    "correctAnswer": "uint",
    "hint": "Unsigned integers are declared using the 'uint' keyword.",
    "explanation": "'uint' is the correct keyword for declaring an unsigned integer, a common data type for non-negative numbers."
  },
  {
    "id": "v2",
    "topic": "Variables & Data Types",
    "level": "Easy",
    "question": "Declare a string variable 'message' with the value 'Hello World'.",
    "template": "string ____ = \"Hello World\";",
    "correctAnswer": "message",
    "hint": "Variable names typically follow the data type.",
    "explanation": "Correct! You've declared a string variable named 'message'."
  },
  {
    "id": "v3",
    "topic": "Variables & Data Types",
    "level": "Intermediate",
    "question": "Declare a public address variable named 'owner'.",
    "template": "address ____ owner;",
    "correctAnswer": "public",
    "hint": "Use a visibility specifier to make the variable readable from outside the contract.",
    "explanation": "'public' is a visibility specifier that automatically creates a getter function for the variable."
  },
  {
    "id": "v4",
    "topic": "Variables & Data Types",
    "level": "Intermediate",
    "question": "Declare a constant variable 'VERSION' of type uint, and set its value to 1.",
    "template": "uint ____ VERSION = 1;",
    "correctAnswer": "constant",
    "hint": "This keyword ensures the variable's value cannot be changed after compilation.",
    "explanation": "Correct! `constant` variables are a gas-efficient way to store values that never change."
  },
  {
    "id": "v5",
    "topic": "Variables & Data Types",
    "level": "Advanced",
    "question": "Initialize a fixed-size byte array of 32 bytes named 'data'.",
    "template": "____ data;",
    "correctAnswer": "bytes32",
    "hint": "This is a value type for storing a sequence of bytes.",
    "explanation": "`bytes32` is a fixed-size byte array. It's more gas-efficient than `bytes` or `string` for short data."
  },
  {
    "id": "v6",
    "topic": "Variables & Data Types",
    "level": "Advanced",
    "question": "Declare an immutable address named 'CREATOR' and set its value in the constructor.",
    "template": "address ____ CREATOR;",
    "correctAnswer": "immutable",
    "hint": "This keyword allows a variable to be assigned only once, in the constructor.",
    "explanation": "`immutable` variables are set at contract creation and cannot be changed, saving gas."
  },
  {
    "id": "f1",
    "topic": "Functions & Visibility",
    "level": "Easy",
    "question": "Complete the function declaration for a public function named 'myFunction'.",
    "template": "function myFunction() ____ {}",
    "correctAnswer": "public",
    "hint": "This visibility makes the function callable both internally and externally.",
    "explanation": "`public` allows the function to be called by anyone."
  },
  {
    "id": "f2",
    "topic": "Functions & Visibility",
    "level": "Easy",
    "question": "Complete the function to return a uint value.",
    "template": "function getNumber() public pure ____ (uint) {}",
    "correctAnswer": "returns",
    "hint": "This keyword specifies the data type of the value the function will return.",
    "explanation": "The `returns` keyword is used to define the return types of a function."
  },
  {
    "id": "f3",
    "topic": "Functions & Visibility",
    "level": "Intermediate",
    "question": "Make this function only callable from within the same contract.",
    "template": "function _helper() ____ {}",
    "correctAnswer": "private",
    "hint": "This visibility specifier restricts access to the current contract only.",
    "explanation": "`private` functions can only be called from other functions within the same contract."
  },
  {
    "id": "f4",
    "topic": "Functions & Visibility",
    "level": "Intermediate",
    "question": "This function should not read from or modify the state. What keyword should be used?",
    "template": "function add(uint a, uint b) public ____ returns (uint) { return a + b; }",
    "correctAnswer": "pure",
    "hint": "This state mutability keyword is for functions that don't interact with the blockchain's state.",
    "explanation": "`pure` functions do not read or write to the contract's state, making them highly predictable."
  },
  {
    "id": "f5",
    "topic": "Functions & Visibility",
    "level": "Advanced",
    "question": "A function that can receive Ether must be marked as ____.",
    "template": "receive() external ____ {}",
    "correctAnswer": "payable",
    "hint": "This keyword is required for functions to accept Ether payments.",
    "explanation": "The `payable` keyword is essential for any function, including `receive()` and `fallback()`, designed to accept Ether."
  },
  {
    "id": "f6",
    "topic": "Functions & Visibility",
    "level": "Advanced",
    "question": "This function should be callable by other contracts, but not by users directly via a transaction. What visibility should be used?",
    "template": "function utility() ____ {}",
    "correctAnswer": "external",
    "hint": "This visibility is more gas-efficient than `public` for functions called from other contracts.",
    "explanation": "`external` is similar to `public`, but is cheaper when the function is called from outside the contract."
  },
  {
    "id": "m1",
    "topic": "Mappings & Structs",
    "level": "Easy",
    "question": "Define a mapping from addresses to unsigned integers named 'balances'.",
    "template": "____(address => uint) public balances;",
    "correctAnswer": "mapping",
    "hint": "This keyword creates a key-value store.",
    "explanation": "`mapping` is used to create hash tables or dictionaries in Solidity."
  },
  {
    "id": "m2",
    "topic": "Mappings & Structs",
    "level": "Easy",
    "question": "Define a struct named 'User' with a uint 'id' and a bool 'isActive'.",
    "template": "____ User { uint id; bool isActive; }",
    "correctAnswer": "struct",
    "hint": "This keyword lets you create custom complex data types.",
    "explanation": "`struct` allows you to group several variables into a custom-defined type."
  },
  {
    "id": "m3",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Access the 'balance' of 'msg.sender' from the 'balances' mapping.",
    "template": "uint myBalance = balances[____];",
    "correctAnswer": "msg.sender",
    "hint": "This global variable holds the address of the person calling the function.",
    "explanation": "`msg.sender` is a crucial global variable that provides the address of the current external caller."
  },
  {
    "id": "m4",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Create a new 'User' struct in memory.",
    "template": "User memory newUser = User(1, ____);",
    "correctAnswer": "true",
    "hint": "Initialize the 'isActive' boolean field.",
    "explanation": "When creating a struct instance, you must provide values for all its members in the order they are defined."
  },
  {
    "id": "m5",
    "topic": "Mappings & Structs",
    "level": "Advanced",
    "question": "Declare a nested mapping from an address to another mapping of uint to bool.",
    "template": "mapping(address => ____(uint => bool)) public userFlags;",
    "correctAnswer": "mapping",
    "hint": "You can nest mappings to create more complex data structures.",
    "explanation": "Nested mappings are powerful for creating multi-dimensional lookups, like user-specific flags."
  },
  {
    "id": "m6",
    "topic": "Mappings & Structs",
    "level": "Advanced",
    "question": "Update a struct in a mapping. Set the 'isActive' flag of a 'User' struct to false.",
    "template": "users[msg.sender].____ = false;",
    "correctAnswer": "isActive",
    "hint": "Use dot notation to access and modify a member of a struct stored in a mapping.",
    "explanation": "You can directly access and modify members of a struct stored within a mapping using dot notation."
  },
  {
    "id": "ms_int_1",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Complete the struct definition within the contract.",
    "template": "pragma solidity ^0.8.0;\ncontract UserMapping {\n struct User {\n string name;\n uint age;\n }\n mapping(address => ______) public users;\n}",
    "correctAnswer": "User",
    "hint": "Reference the struct you just defined as the value type in the mapping.",
    "explanation": "Correct! You are mapping an address to a `User` struct."
  },
  {
    "id": "ms_int_2",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Provide a name for the mapping.",
    "template": "pragma solidity ^0.8.0;\ncontract Points {\n struct Score {\n uint points;\n }\n mapping(address => Score) public ______;\n}",
    "correctAnswer": "scores",
    "hint": "Choose a descriptive name for the mapping that holds user scores.",
    "explanation": "Great! `scores` is a fitting name for a mapping that stores `Score` structs."
  },
  {
    "id": "ms_int_3",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Make the `students` mapping accessible from outside the contract.",
    "template": "pragma solidity ^0.8.0;\ncontract StudentData {\n struct Student {\n string name;\n uint256 grade;\n }\n mapping(uint => Student) ______ students;\n}",
    "correctAnswer": "public",
    "hint": "Use a visibility specifier to create an automatic getter function.",
    "explanation": "`public` visibility for a mapping allows anyone to query the data."
  },
  {
    "id": "ms_int_4",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Choose a variable name for the private mapping.",
    "template": "pragma solidity ^0.8.0;\ncontract Registry {\n struct Info {\n string data;\n }\n mapping(address => Info) private ______;\n}",
    "correctAnswer": "registry",
    "hint": "A common convention is to name the mapping after the contract's purpose.",
    "explanation": "Using `registry` is a clear and concise name for this mapping."
  },
  {
    "id": "ms_int_5",
    "topic": "Mappings & Structs",
    "level": "Intermediate",
    "question": "Specify the value type for the `voters` mapping.",
    "template": "pragma solidity ^0.8.0;\ncontract VoterList {\n struct Voter {\n bool registered;\n }\n mapping(address => ______) public voters;\n}",
    "correctAnswer": "Voter",
    "hint": "The mapping should store the `Voter` struct for each address.",
    "explanation": "Correct! The mapping `voters` will store a `Voter` struct for each address key."
  },
  {
    "id": "a1",
    "topic": "Arrays & Loops",
    "level": "Easy",
    "question": "Declare a dynamic array of unsigned integers named 'scores'.",
    "template": "uint[] ____ scores;",
    "correctAnswer": "public",
    "hint": "Making the array public allows external access.",
    "explanation": "Declaring an array as `public` automatically creates a getter function to read its elements."
  },
  {
    "id": "a2",
    "topic": "Arrays & Loops",
    "level": "Easy",
    "question": "Add the number 100 to the end of the 'scores' dynamic array.",
    "template": "scores.____(100);",
    "correctAnswer": "push",
    "hint": "This function appends an element to a dynamic array.",
    "explanation": "The `.push()` method is used to add an element to the end of a dynamic array."
  },
  {
    "id": "a3",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Declare a fixed-size memory array of 5 addresses.",
    "template": "address[5] ____ myAddresses;",
    "correctAnswer": "memory",
    "hint": "This keyword specifies that the array's data is stored temporarily during function execution.",
    "explanation": "The `memory` keyword is required for declaring arrays of complex types (like `address` or `string`) within functions."
  },
  {
    "id": "a4",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Start a for loop that iterates from 0 up to (but not including) 10.",
    "template": "for (uint i = 0; ____; i++) {}",
    "correctAnswer": "i < 10",
    "hint": "The second part of a for loop is the condition that keeps the loop running.",
    "explanation": "The condition `i < 10` ensures the loop executes 10 times, for `i` from 0 to 9."
  },
  {
    "id": "a5",
    "topic": "Arrays & Loops",
    "level": "Advanced",
    "question": "Get the length of the 'scores' array.",
    "template": "uint totalScores = scores.____;",
    "correctAnswer": "length",
    "hint": "This property returns the number of elements in an array.",
    "explanation": "The `.length` property is a built-in way to find out the size of an array."
  },
  {
    "id": "a6",
    "topic": "Arrays & Loops",
    "level": "Advanced",
    "question": "Remove the last element from a dynamic array named 'items'.",
    "template": "items.____();",
    "correctAnswer": "pop",
    "hint": "This array method removes and returns the last element, reducing the array's length.",
    "explanation": "The `.pop()` method is used to remove the last element from a dynamic storage array."
  },
  {
    "id": "al_int_1",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Add a new number to the `nums` array.",
    "template": "pragma solidity ^0.8.0;\ncontract Numbers {\n uint[] public nums;\n function addNumber(uint _num) public {\n nums.______(_num);\n }\n}",
    "correctAnswer": "push",
    "hint": "Use this method to append an element to the end of a dynamic array.",
    "explanation": "The `push` method adds an element to the end of a dynamic array."
  },
  {
    "id": "al_int_2",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Get the number of elements in the `data` array.",
    "template": "pragma solidity ^0.8.0;\ncontract Counter {\n uint[] public data;\n function count() public view returns(uint) {\n return data.______;\n }\n}",
    "correctAnswer": "length",
    "hint": "This property provides the size of the array.",
    "explanation": "`.length` is used to get the number of elements in an array."
  },
  {
    "id": "al_int_3",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Access the element at the current loop index.",
    "template": "pragma solidity ^0.8.0;\ncontract Total {\n uint[] public values;\n function sum() public view returns(uint total) {\n for(uint i = 0; i < values.length; i++) {\n total += ______[i];\n }\n }\n}",
    "correctAnswer": "values",
    "hint": "Use the name of the array being iterated over.",
    "explanation": "You need to access the element from the `values` array at index `i`."
  },
  {
    "id": "al_int_4",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Increment the counter variable inside the loop.",
    "template": "pragma solidity ^0.8.0;\ncontract EvenNumbers {\n uint[] public nums;\n function findEven() public view returns(uint count) {\n for(uint i = 0; i < nums.length; i++) {\n if(nums[i] % 2 == 0) {\n ______++;\n }\n }\n }\n}",
    "correctAnswer": "count",
    "hint": "The variable `count` is used to track the number of even numbers found.",
    "explanation": "Incrementing `count` keeps track of how many even numbers are found in the array."
  },
  {
    "id": "al_int_5",
    "topic": "Arrays & Loops",
    "level": "Intermediate",
    "question": "Access the array element using the provided function parameter.",
    "template": "pragma solidity ^0.8.0;\ncontract StorageArray {\n uint[5] public fixedArray = [1,2,3,4,5];\n function getElement(uint index) public view returns(uint) {\n return fixedArray[______];\n }\n}",
    "correctAnswer": "index",
    "hint": "The `index` parameter determines which element to retrieve.",
    "explanation": "The `index` variable is used to access a specific element in `fixedArray`."
  },
  {
    "id": "e1",
    "topic": "Events & Modifiers",
    "level": "Easy",
    "question": "Declare an event named 'Transfer' that logs a 'from' address, a 'to' address, and a 'value' uint.",
    "template": "____ Transfer(address from, address to, uint value);",
    "correctAnswer": "event",
    "hint": "This keyword is used to declare events.",
    "explanation": "Events are a way for smart contracts to communicate with front-end applications that something has happened on the blockchain."
  },
  {
    "id": "e2",
    "topic": "Events & Modifiers",
    "level": "Easy",
    "question": "Emit the 'Transfer' event.",
    "template": "____ Transfer(msg.sender, _to, _amount);",
    "correctAnswer": "emit",
    "hint": "This keyword triggers an event.",
    "explanation": "You must use the `emit` keyword to fire an event and log its data."
  },
  {
    "id": "e3",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "Declare a modifier named 'onlyOwner'.",
    "template": "____ onlyOwner { require(msg.sender == owner); _; }",
    "correctAnswer": "modifier",
    "hint": "This keyword is used to create reusable checks for functions.",
    "explanation": "Modifiers are reusable pieces of code that can run before and/or after a function call, commonly used for access control."
  },
  {
    "id": "e4",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "In a modifier, where does the modified function's body get executed?",
    "template": "modifier myModifier { // code before \n ____; \n // code after }",
    "correctAnswer": "_",
    "hint": "This special symbol is a placeholder for the function code.",
    "explanation": "The single underscore `_` is a special character in a modifier that represents the body of the function being modified."
  },
  {
    "id": "e5",
    "topic": "Events & Modifiers",
    "level": "Advanced",
    "question": "Index the 'from' and 'to' parameters in the 'Transfer' event to make them searchable.",
    "template": "event Transfer(address ____ from, address ____ to, uint value);",
    "correctAnswer": "indexed",
    "hint": "This keyword allows you to filter for events based on the value of the parameter.",
    "explanation": "`indexed` parameters are stored in a special data structure in the logs, allowing you to efficiently search for specific events."
  },
  {
    "id": "e6",
    "topic": "Events & Modifiers",
    "level": "Advanced",
    "question": "Apply the 'onlyOwner' modifier to the 'withdraw' function.",
    "template": "function withdraw() public ____ {}",
    "correctAnswer": "onlyOwner",
    "hint": "Add the modifier's name after the visibility specifier.",
    "explanation": "To use a modifier, simply add its name to the function definition after the visibility."
  },
  {
    "id": "mr_int_1",
    "topic": "Modifiers & Require",
    "level": "Intermediate",
    "question": "This special character in a modifier represents the rest of the function's code.",
    "template": "pragma solidity ^0.8.0;\ncontract AccessControl {\n address public owner;\n constructor() {\n owner = msg.sender;\n }\n modifier onlyOwner() {\n require(msg.sender == owner, \"Not authorized\");\n ______;\n }\n}",
    "correctAnswer": "_",
    "hint": "It's a single underscore.",
    "explanation": "The `_` symbol is a placeholder for the function body where the modifier is applied."
  },
  {
    "id": "mr_int_2",
    "topic": "Modifiers & Require",
    "level": "Intermediate",
    "question": "Complete the require statement to ensure the deposit amount is added to the balance.",
    "template": "pragma solidity ^0.8.0;\ncontract Deposit {\n uint public balance;\n function deposit(uint amount) public {\n require(amount > 0, \"Invalid amount\");\n balance += ______;\n }\n}",
    "correctAnswer": "amount",
    "hint": "Use the function's input parameter.",
    "explanation": "The `amount` from the function input is added to the contract's `balance`."
  },
  {
    "id": "mr_int_3",
    "topic": "Modifiers & Require",
    "level": "Intermediate",
    "question": "Complete the division operation.",
    "template": "pragma solidity ^0.8.0;\ncontract Checker {\n function safeDivide(uint a, uint b) public pure returns(uint) {\n require(b != 0, \"Cannot divide by zero\");\n return a / ______;\n }\n}",
    "correctAnswer": "b",
    "hint": "The divisor is the second parameter.",
    "explanation": "Division by `b` is performed after ensuring `b` is not zero."
  },
  {
    "id": "mr_int_4",
    "topic": "Modifiers & Require",
    "level": "Intermediate",
    "question": "Use the state variable to check the age.",
    "template": "pragma solidity ^0.8.0;\ncontract AgeValidator {\n uint public minAge = 18;\n function check(uint age) public view {\n require(age >= ______, \"Too young\");\n }\n}",
    "correctAnswer": "minAge",
    "hint": "Compare the input `age` with the contract's minimum age requirement.",
    "explanation": "The `require` statement validates the input `age` against the `minAge` state variable."
  },
  {
    "id": "mr_int_5",
    "topic": "Modifiers & Require",
    "level": "Intermediate",
    "question": "This special character in a modifier represents the rest of the function's code.",
    "template": "pragma solidity ^0.8.0;\ncontract Guarded {\n bool public locked;\n modifier notLocked() {\n require(!locked, \"Locked\");\n ______;\n }\n}",
    "correctAnswer": "_",
    "hint": "It's a single underscore.",
    "explanation": "The `_` symbol is a placeholder for the function body where the `notLocked` modifier is applied."
  },
  {
    "id": "ee_int_1",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "What value should be logged in the `DataStored` event?",
    "template": "pragma solidity ^0.8.0;\ncontract LogEvent {\n event DataStored(address user, uint amount);\n function store(uint amount) public {\n emit DataStored(msg.sender, ______);\n }\n}",
    "correctAnswer": "amount",
    "hint": "The event should log the `amount` passed to the `store` function.",
    "explanation": "The `amount` parameter is passed to the event to log the stored value."
  },
  {
    "id": "ee_int_2",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "Use the keyword to trigger the `UserJoined` event.",
    "template": "pragma solidity ^0.8.0;\ncontract Notify {\n event UserJoined(string name);\n function join(string memory name) public {\n ______ UserJoined(name);\n }\n}",
    "correctAnswer": "emit",
    "hint": "This keyword is used to fire events.",
    "explanation": "`emit` is the keyword used to trigger an event and log its data."
  },
  {
    "id": "ee_int_3",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "Provide a string literal to be emitted with the `Action` event.",
    "template": "pragma solidity ^0.8.0;\ncontract Logger {\n event Action(string action);\n function act() public {\n emit Action(\"______\");\n }\n}",
    "correctAnswer": "Run",
    "hint": "Any string can be used here, like \"Run\". Don't include the quotes in your answer.",
    "explanation": "Correct! You can pass literal values like strings directly when emitting an event."
  },
  {
    "id": "ee_int_4",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "Pass the function's input parameter to the `Deposited` event.",
    "template": "pragma solidity ^0.8.0;\ncontract DepositEvent {\n event Deposited(address indexed user, uint256 amount);\n function deposit(uint256 value) public {\n emit Deposited(msg.sender, ______);\n }\n}",
    "correctAnswer": "value",
    "hint": "The event expects the amount that was deposited.",
    "explanation": "The `value` from the function parameter is emitted as part of the event data."
  },
  {
    "id": "ee_int_5",
    "topic": "Events & Modifiers",
    "level": "Intermediate",
    "question": "Complete the event emission with the recipient's address.",
    "template": "pragma solidity ^0.8.0;\ncontract IndexedEvent {\n event Transfer(address indexed from, address indexed to, uint value);\n function send(address to, uint amount) public {\n emit Transfer(msg.sender, ______, amount);\n }\n}",
    "correctAnswer": "to",
    "hint": "The second parameter of the `Transfer` event is the recipient.",
    "explanation": "The `to` address from the `send` function's parameters is used for the event."
  },
  {
    "id": "ci_int_1",
    "topic": "Constructor & Inheritance",
    "level": "Intermediate",
    "question": "Initialize the state variable `x` with the constructor parameter.",
    "template": "pragma solidity ^0.8.0;\ncontract Parent {\n uint public x;\n constructor(uint _x) {\n x = ______;\n }\n}",
    "correctAnswer": "_x",
    "hint": "Assign the value from the constructor's input parameter.",
    "explanation": "The state variable `x` is initialized with the value `_x` passed to the constructor."
  },
  {
    "id": "ci_int_2",
    "topic": "Constructor & Inheritance",
    "level": "Intermediate",
    "question": "Pass the constructor argument from the child contract to the parent `Base` contract.",
    "template": "pragma solidity ^0.8.0;\ncontract Base {\n uint public y;\n constructor(uint _y) {\n y = _y;\n }\n}\ncontract Child is Base {\n constructor(uint val) Base(______) {}\n}",
    "correctAnswer": "val",
    "hint": "The parent constructor needs the value from the child's constructor.",
    "explanation": "When inheriting, you must pass the required arguments to the parent contract's constructor."
  },
  {
    "id": "ci_int_3",
    "topic": "Constructor & Inheritance",
    "level": "Intermediate",
    "question": "Initialize the `name` state variable from the constructor's parameter.",
    "template": "pragma solidity ^0.8.0;\ncontract A {\n string public name;\n constructor(string memory _name) {\n name = ______;\n }\n}",
    "correctAnswer": "_name",
    "hint": "The `name` variable should be set to the value of the `_name` parameter.",
    "explanation": "The constructor sets the initial value of the `name` state variable."
  },
  {
    "id": "ci_int_4",
    "topic": "Constructor & Inheritance",
    "level": "Intermediate",
    "question": "Provide a hardcoded string literal to the parent `Animal` constructor.",
    "template": "pragma solidity ^0.8.0;\ncontract Animal {\n string public species;\n constructor(string memory _species) {\n species = _species;\n }\n}\ncontract Dog is Animal {\n constructor() Animal(\"______\") {}\n}",
    "correctAnswer": "Dog",
    "hint": "The child `Dog` contract should identify its species as \"Dog\". Don't include the quotes in your answer.",
    "explanation": "The `Dog` contract calls its parent `Animal` constructor with the string \"Dog\" to set its species."
  },
  {
    "id": "ci_int_5",
    "topic": "Constructor & Inheritance",
    "level": "Intermediate",
    "question": "Provide a literal value to the parent `BaseContract` constructor directly in the inheritance declaration.",
    "template": "pragma solidity ^0.8.0;\ncontract BaseContract {\n uint public data;\n constructor(uint _data) {\n data = _data;\n }\n}\ncontract Extended is BaseContract(______) {}",
    "correctAnswer": "5",
    "hint": "You can provide constructor arguments directly where you declare inheritance.",
    "explanation": "For simple cases, you can pass a constant value to a parent constructor directly in the `is` declaration."
  }
]
